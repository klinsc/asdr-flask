generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = "5"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Machine learning server
model MLServer {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String?
    url         String
    selected    Boolean  @default(false)
}

// Drawing type
model DrawingType {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    name        String
    description String?
    Drawing     Drawing[]
}

// Part enum
enum Part {
    kv115
    kv22
    universal
}

// Drawing component 115kv
model Component {
    id               String             @id @default(cuid())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    index            Int
    name             String
    description      String?
    Part             Part
    DrawingComponent DrawingComponent[]
}

// Drawing (temp.)
model Drawing {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String?

    drawingTypeId    String
    drawtingType     DrawingType        @relation(fields: [drawingTypeId], references: [id])
    DrawingComponent DrawingComponent[]
}

// Drawing component (temp.)
model DrawingComponent {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    number  Int

    componentId String
    component   Component @relation(fields: [componentId], references: [id])

    drawingId String
    drawing   Drawing @relation(fields: [drawingId], references: [id])
}
